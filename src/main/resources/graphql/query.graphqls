scalar Date
scalar Boolean
#selet
type Query {
    login(username: String!, password: String!): AccountResponse!
    getLops: LopsResponse!
    getSinhViens: SinhViensResponse!
    getSinhVienById(sinhVienId: ID):SinhVienResponse!
    getProfile: SinhVienResponse!
}



#create , update , delete
type Mutation {
    register(inputs: RegisterAccountInput!): RegisterResponse!
    changePassword(inputs: UpdatePasswordInput!): AccountResponse!
    createLop(tenLop: String!, khoaHoc: String! ): LopResponse!
    createSinhVien(input: SinhVienInput!):SinhVienResponse!
    deleteSinhVien(sinhVienId: ID!):SinhVienResponse!
}

#================================================================

interface ResponseInterface {
    status: ResponseStatus!
    message: String
    errors: [ErrorsResponse]
}

type ErrorsResponse {
    message: String
    error_fields: [String]
}

enum ResponseStatus {
    OK
    WARNING
    ERROR
}

enum TrangThai {
    DANG_HOC
    RA_TRUONG
    BAO_LUU
}

enum BacDaoTao {
    DAI_HOC
    CAO_DANG
}

enum TonGiao {
    PHAT_GIAO
    KHONG
}

enum DanToc {
    KINH
}

enum LoaiHinhDaoTao {
    TIEN_TIEN
    DAI_TRA
}
#========================================================================

type Account {
    token: String
    user: User
}

type User {
    id: ID!
    name: String!
    email: String
    images: [Image]
}

type Image {
    name: String
}

type Lop{
    lopId: ID
    tenLop : String
    khoaHoc : String
}

type SinhVien {
    sinhVienId:ID
    maSinhVien:String
    maHoSo:String
    #    image:String
    hoTenDem:String
    ten:String
    gioiTinh:Boolean
    ngaySinh:Date
    bacDaoTao: BacDaoTao
    trangThai: TrangThai
    loaiHinhDaoTao:LoaiHinhDaoTao
    ngayVaoTruong:Date
    ngayVaoDoan:Date
    soDienThoai:String
    diaChi: String
    noiSinh: String
    hoKhauThuongTru:String
    danToc: DanToc
    ngayVaoDang: Date
    email:String
    tonGiao:TonGiao
}
#==========================================================================================
input RegisterAccountInput {
    username: String!
    password: String!
    user: CreateUserInput!
}

input CreateUserInput {
    name: String!
    email: String
    images: [String]
}

input UpdatePasswordInput {
    currentPassword: String!
    newPassword: String!
}


input SinhVienInput{
    maSinhVien:String!
    maHoSo:String!
    hoTenDem:String!
    ten:String!
    gioiTinh: Boolean
    ngaySinh: Date
    bacDaoTao: BacDaoTao
    trangThai: TrangThai
    loaiHinhDaoTao:LoaiHinhDaoTao
    ngayVaoTruong:Date
    ngayVaoDoan:Date
    soDienThoai:String
    diaChi: String
    noiSinh: String
    hoKhauThuongTru:String
    danToc: DanToc
    ngayVaoDang: Date
    email:String
    tonGiao:TonGiao
}


#==========================================================================================

type AccountResponse implements ResponseInterface{
    status: ResponseStatus!
    errors: [ErrorsResponse]
    message: String
    data: Account
}

type RegisterResponse implements ResponseInterface {
    status: ResponseStatus!
    message: String
    errors: [ErrorsResponse]
}

type LopResponse implements ResponseInterface {
    status: ResponseStatus!
    message: String
    errors: [ErrorsResponse]
    data:Lop
}

type LopsResponse implements ResponseInterface {
    status: ResponseStatus!
    message: String
    errors: [ErrorsResponse]
    data:[Lop]
}

type SinhVienResponse implements ResponseInterface{
    status: ResponseStatus!
    message: String
    errors: [ErrorsResponse]
    data:SinhVien
}

type SinhViensResponse implements ResponseInterface{
    status: ResponseStatus!
    message: String
    errors: [ErrorsResponse]
    data:[SinhVien]
}