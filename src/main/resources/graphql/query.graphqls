scalar Date

type Query {
    login(username: String!, password: String!): AccountResponse!
}
#
#type Mutation {
#    createUser(inputs: UserInput!): UserResponse!
#}

#================================================================

interface ResponseInterface {
    status: ResponseStatus!
    message: String
    errors: [ErrorsResponse]
}

type ErrorsResponse {
    message: String
    error_fields: [String]
}

enum ResponseStatus {
    OK
    WARNING
    ERROR
}

#========================================================================

type AccountResponse implements ResponseInterface{
    status: ResponseStatus!
    errors: [ErrorsResponse]
    message: String
    data: Account
}

type Account {
    token: String
    user: User
}

type User {
    id: ID!
    name: String!
    email: String
    images: [Image]
}

type Image {
    name: String
}

#==========================================================================================
