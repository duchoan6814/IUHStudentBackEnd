scalar Date

type Query {
    login(username: String!, password: String!): AccountResponse!
}

type Mutation {
    register(inputs: RegisterAccountInput!): RegisterResponse!
    changePassword(inputs: UpdatePasswordInput!): AccountResponse!
    deleteAccount(id: ID): DeleteUserResponse!
}

#================================================================

interface ResponseInterface {
    status: ResponseStatus!
    message: String
    errors: [ErrorsResponse]
}

type ErrorsResponse {
    message: String
    error_fields: [String]
}

enum ResponseStatus {
    OK
    WARNING
    ERROR
}

#========================================================================

type Account {
    token: String
    user: User
}

type User {
    id: ID!
    name: String!
    email: String
    images: [Image]
}

type Image {
    name: String
}

#==========================================================================================
input RegisterAccountInput {
    username: String!
    password: String!
    user: CreateUserInput!
}

input CreateUserInput {
    name: String!
    email: String
    images: [String]
}

input UpdatePasswordInput {
    currentPassword: String!
    newPassword: String!
}


#==========================================================================================

type AccountResponse implements ResponseInterface{
    status: ResponseStatus!
    errors: [ErrorsResponse]
    message: String
    data: Account
}

type RegisterResponse implements ResponseInterface {
    status: ResponseStatus!
    message: String
    errors: [ErrorsResponse]
}

type DeleteUserResponse implements ResponseInterface {
    status: ResponseStatus!
    message: String
    errors: [ErrorsResponse]
}