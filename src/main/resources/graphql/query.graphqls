scalar Date
scalar Boolean
#selet
type Query {
    getLops: LopsResponse!
#    getLopById(lopId:ID!):LopResponse!
    getSinhViens: SinhViensResponse!
    getSinhVienById(sinhVienId: ID!):SinhVienResponse!
    getKhoas: KhoasResponse!
    getKhoaById(khoaVienId:ID!):KhoaResponse!
    getProfile: SinhVienResponse!
    getChuyenNganhs: ChuyenNganhsResponse!
    getChuyenNganhById(chuyenNganhId: ID!):ChuyenNganhResponse!
    getHocKys: HocKysResponse!
    getHocKyById(hocKyId:ID!):HocKyResponse!
    getMonHocs: MonHocsResponse!
    getMonHocById(monHocId:ID!):MonHocResponse!
    getMonHocWithName(tenMonHoc:String!):MonHocsResponse!
    getChuyenNganhWithKhoaVienId(khoaVienId:ID!):ChuyenNganhsResponse!
    getSinhVienWithKhoaVienId(khoaVienId:ID!):SinhViensResponse!
    getSinhVienWithKhoaVienIdAndNgayVaoTruong(khoaVienId:ID!,ngayVaoTruong: String!):SinhViensResponse!
    getNamHocWithKhoaVienId(khoaVienId:ID!):NamHocsResponse!
    getLopHocPhans: LopHocPhansResponse!
    getLopHocPhanById(lopHocPhanId: ID!): LopHocPhanReponse!
    getHocPhans:HocPhansResponse!
    getHocPhanById(hocPhanId: ID!): HocPhanResponse!
    getMonHocWithChuyenNganhId(chuyenNganhId:ID!):MonHocsResponse!
}



#create , update , delete
type Mutation {
    changePassword(inputs: UpdatePasswordInput!): AccountResponse!
    createLop(tenLop: String!, khoaHoc: String! ): LopResponse!
    createSinhVien(inputs: RegisterAccountInput!): RegisterResponse!
    deleteSinhVien(sinhVienId: ID!):SinhVienResponse!
    addSinhVienVaoLop(sinhVienId: ID,lopId: ID!): SinhVienResponse!
    updateSinhVien(inputs:SinhVienUpdateInput!,maSinhVien:String!):UpdateSVResponse!
    createKhoa(inputs: KhoaInput!):KhoaResponse!
    updateKhoa(inputs: KhoaInput!,maKhoa:ID!):KhoaResponse!
    deleteKhoa(khoaId: ID!):KhoaResponse!
    login(username: String!, password: String!): AccountResponse!
    createChuyenNganh(inputs: ChuyenNganhInput!):ChuyenNganhResponse!
    updateChuyenNganh(inputs: ChuyenNganhInput!,chuyenNganhId:ID!):ChuyenNganhResponse!
    deleteChuyenNganh(chuyenNganhId:ID!):ChuyenNganhResponse!
    createHocKy(inputs: HocKyInput!):HocKyResponse!
    updateHocKy(inputs: HocKyInput!,maHocKy:ID!):HocKyResponse!
    deleteHocKy(hocKyId: ID!):HocKyResponse!
    createMonHoc(inputs: MonHocInput!):MonHocResponse!
    updateMonHoc(inputs: MonHocInput!,maMonHoc:ID!):MonHocResponse!
    deleteMonHoc(monHocId: ID!):MonHocResponse!
    addChuyenNganh(inputs:ChuyenNganhInputs!):ChuyenNganhResponse!
    createLopHocPhan(inputs: LopHocPhanInput!):LopHocPhanReponse!
    deleteLopHocPhan(lopHocPhanId: ID!): LopHocPhanReponse!
    updateLopHocPhan(inputs: LopHocPhanInput!,lopHocPhanId: ID!):LopHocPhanReponse!
    createHocPhan(inputs: HocPhanInput!): HocPhanResponse!
    updateHocPhan(inputs: HocPhanInput!,hocPhanId: ID!):HocPhanResponse!
    deleteHocPhan(hocPhanId: ID!): HocPhanResponse!


}
#    addMonHoc(inputs:MonHocInputs!):MonHocResponse!

#================================================================

interface ResponseInterface {
    status: ResponseStatus!
    message: String
    errors: [ErrorsResponse]
}

type ErrorsResponse {
    message: String
    error_fields: [String]
}

enum ResponseStatus {
    OK
    WARNING
    ERROR
}

enum TrangThai {
    DANG_HOC
    RA_TRUONG
    BAO_LUU
}

enum BacDaoTao {
    DAI_HOC
    CAO_DANG
}

enum TonGiao {
    PHAT_GIAO
    KHONG
}

enum DanToc {
    KINH
}

enum LoaiHinhDaoTao {
    TIEN_TIEN
    DAI_TRA
}
enum TrangThaiLopHocPhan{
    DANG_LEN_KE_HOACH
    CHO_SINH_VIEN_DANG_KY
    CHAP_NHAN_MO_LOP
    HUY_LOP_HOC_PHAN
    DA_KHOA
}
#========================================================================

type Account {
    token: String
    sinhVien: SinhVien
}

type Lop{
    lopId: ID
    tenLop : String
    khoaHoc : String
}

type SinhVien {
    sinhVienId:ID
    maSinhVien:String
    maHoSo:String
    image:String
    hoTenDem:String
    ten:String
    gioiTinh:Boolean
    ngaySinh:Date
    bacDaoTao: BacDaoTao
    trangThai: TrangThai
    loaiHinhDaoTao:LoaiHinhDaoTao
    ngayVaoTruong:Date
    ngayVaoDoan:Date
    soDienThoai:String
    diaChi: String
    noiSinh: String
    hoKhauThuongTru:String
    danToc: DanToc
    ngayVaoDang: Date
    email:String
    tonGiao:TonGiao
}

type Khoa {
    khoaVienId: ID
    tenKhoaVien:String
    lienKet:String
}

type ChuyenNganh {
    chuyenNganhId: ID
    tenChuyenNganh: String
}

type HocKy{
    hocKyId: ID
    namBatDau: ID
    namKetThuc: ID
    moTa: String
}

type MonHoc{
    monHocId:ID
    tenMonHoc:String
    moTa: String
}

type NamHoc {
    namHoc:String
}

type LopHocPhan{
    lopHocPhanId: ID
    maLopHocPhan: String
    tenVietTat: String
    tenLopHocPhan: String
    soNhomThucHanh: ID
    trangThaiLopHocPhan: TrangThaiLopHocPhan
    soLuongToiDa: ID
    moTa: String
}
type HocPhan{
    hocPhanId : ID
    maHocPhan : String!
    soTinChiLyThuyet: String
    getSoTinChiThucHanh: String
    moTa: String
    batBuoc: Boolean
}
#==========================================================================================
input RegisterAccountInput {
    username: String!
    password: String!
    sinhVien: SinhVienInput!
}

input UpdatePasswordInput {
    currentPassword: String!
    newPassword: String!
}
input LopInput {
    id:ID
    tenLop:String
    khoaHoc:String
}

input SinhVienInput{
    maSinhVien:String!
    maHoSo:String!
    hoTenDem:String!
    ten:String!
    gioiTinh: Boolean
    ngaySinh: Date
    bacDaoTao: BacDaoTao
    trangThai: TrangThai
    loaiHinhDaoTao:LoaiHinhDaoTao
    ngayVaoTruong:Date
    ngayVaoDoan:Date
    soDienThoai:String
    diaChi: String
    noiSinh: String
    hoKhauThuongTru:String
    danToc: DanToc
    ngayVaoDang: Date
    email:String
    tonGiao:TonGiao
}

input SinhVienUpdateInput{
    maHoSo:String
    hoTenDem:String
    ten:String
    gioiTinh: Boolean
    ngaySinh: Date
    bacDaoTao: BacDaoTao
    trangThai: TrangThai
    loaiHinhDaoTao:LoaiHinhDaoTao
    ngayVaoTruong:Date
    ngayVaoDoan:Date
    soDienThoai:String
    diaChi: String
    noiSinh: String
    hoKhauThuongTru:String
    danToc: DanToc
    ngayVaoDang: Date
    email:String
    tonGiao:TonGiao
}

input KhoaInput {
     tenKhoaVien:String
     lienKet:String
}

input MonHocInput {
    tenMonHoc:String
    moTa: String
}


input ChuyenNganhInput {
    tenChuyenNganh: String!
}

input ChuyenNganhInputs {
    tenChuyenNganh: String!
    khoaVienId: ID!
}
input MonHocInputs {
    tenMonHoc:String!
    moTa: String
    chuyenNganhId: Int!
}

input HocKyInput {
    namBatDau:Int
    namKetThuc:Int
}

input  LopHocPhanInput{
    maLopHocPhan: String!
    tenVietTat: String
    tenLopHocPhan: String
    soNhomThucHanh: ID
    trangThaiLopHocPhan: TrangThaiLopHocPhan
    soLuongToiDa: ID
    moTa: String
}

input HocPhanInput{
    maHocPhan : String!
    soTinChiLyThuyet: String
    getSoTinChiThucHanh: String
    moTa: String
    batBuoc: Boolean
}
#==========================================================================================

type AccountResponse implements ResponseInterface{
    status: ResponseStatus!
    errors: [ErrorsResponse]
    message: String
    data: Account
}

type RegisterResponse implements ResponseInterface {
    status: ResponseStatus!
    message: String
    errors: [ErrorsResponse]
    data: SinhVien
}

type LopResponse implements ResponseInterface {
    status: ResponseStatus!
    message: String
    errors: [ErrorsResponse]
    data:Lop
}

type LopsResponse implements ResponseInterface {
    status: ResponseStatus!
    message: String
    errors: [ErrorsResponse]
    data:[Lop]
}

type SinhVienResponse implements ResponseInterface{
    status: ResponseStatus!
    message: String
    errors: [ErrorsResponse]
    data:SinhVien
}

type SinhViensResponse implements ResponseInterface{
    status: ResponseStatus!
    message: String
    errors: [ErrorsResponse]
    data:[SinhVien]
}

type UpdateSVResponse implements ResponseInterface {
    status: ResponseStatus!
    message: String
    errors: [ErrorsResponse]
    data:SinhVien
}

type KhoaResponse implements ResponseInterface {
    status: ResponseStatus!
    message: String
    errors: [ErrorsResponse]
    data:Khoa
}

type KhoasResponse implements ResponseInterface {
    status: ResponseStatus!
    message: String
    errors: [ErrorsResponse]
    data:[Khoa]
}

type ChuyenNganhResponse implements ResponseInterface {
    status: ResponseStatus!
    message: String
    errors: [ErrorsResponse]
    data:ChuyenNganh
}

type ChuyenNganhsResponse implements ResponseInterface {
    status: ResponseStatus!
    message: String
    errors: [ErrorsResponse]
    data:[ChuyenNganh]
}

type HocKyResponse implements ResponseInterface {
    status: ResponseStatus!
    message: String
    errors: [ErrorsResponse]
    data:HocKy
}
type HocKysResponse implements ResponseInterface {
    status: ResponseStatus!
    message: String
    errors: [ErrorsResponse]
    data:[HocKy]
}

type MonHocResponse implements ResponseInterface {
    status: ResponseStatus!
    message: String
    errors: [ErrorsResponse]
    data:MonHoc
}
type MonHocsResponse implements ResponseInterface {
    status: ResponseStatus!
    message: String
    errors: [ErrorsResponse]
    data:[MonHoc]
}

type NamHocsResponse implements ResponseInterface {
    status: ResponseStatus!
    message: String
    errors: [ErrorsResponse]
    data:[NamHoc]
}

type  LopHocPhanReponse implements  ResponseInterface{
    status: ResponseStatus!
    message: String
    errors: [ErrorsResponse]
    data:LopHocPhan
}
type  LopHocPhansResponse implements  ResponseInterface{
    status: ResponseStatus!
    message: String
    errors: [ErrorsResponse]
    data:[LopHocPhan]
}
type  HocPhanResponse implements  ResponseInterface{
    status: ResponseStatus!
    message: String
    errors: [ErrorsResponse]
    data: HocPhan
}
type  HocPhansResponse implements  ResponseInterface{
    status: ResponseStatus!
    message: String
    errors: [ErrorsResponse]
    data:[HocPhan]
}



